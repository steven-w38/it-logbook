<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>OTP Verification</title>
  <style>
    body {
      background: #f7fbff;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: 'Segoe UI', Arial, sans-serif;
    }
    .container {
      background: #fff;
      border-radius: 20px;
      box-shadow: 0 4px 16px rgba(30,55,155,0.08);
      padding: 32px 32px 40px;
      width: 360px;
    }
    .header {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 12px;
      margin-bottom: 28px;
    }

    .logo {
      background-color: #1E379B;
      color: white;
      border-radius: 12px;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
    }

    .title {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1E379B;
    }
    .otp-desc {
      font-size: 1rem;
      margin-bottom: 20px;
      color: #222;
      text-align: center;
    }
    .otp-boxes {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-bottom: 30px;
    }
    .otp-input {
      width: 40px;
      height: 48px;
      border: 2px solid #1E379B;
      border-radius: 8px;
      font-size: 1.6rem;
      text-align: center;
      outline: none;
      transition: border 0.2s;
      color: #1E379B;
      background: #fafcff;
    }
    .otp-input:focus {
      border: 2.5px solid #1E379B;
      background: #eef1fc;
    }
    .verify-btn {
      width: 100%;
      background: #1E379B;
      color: #fff;
      border: none;
      font-size: 1.1rem;
      font-weight: 600;
      border-radius: 8px;
      padding: 14px 0;
      cursor: pointer;
      margin-bottom: 20px;
      transition: background 0.2s;
    }
    .verify-btn:hover {
      background: #153077;
    }
    .resend-text, .resend-link {
      color: #1E379B;
      font-size: 0.98rem;
      text-align: center;
    }
    button[disabled] {
      color: gray !important;
      cursor: not-allowed !important;
      text-decoration: none !important;
    }
    .alert-danger {
      background-color: #e13c4d;
      color: #fff;
      padding: 12px 16px;
      border-radius: 8px;
      font-size: 14px;
      margin-bottom: 20px;
      text-align: left;
    }
    .alert-success {
      background-color: #2d9f47;
      color: #fff;
      padding: 12px 16px;
      border-radius: 8px;
      font-size: 14px;
      margin-bottom: 20px;
      text-align: left;
    }
  </style>
  <script>
    window.addEventListener('DOMContentLoaded', () => {
      const inputs = document.querySelectorAll('.otp-input');
      inputs[0].focus();
      inputs.forEach((input, i) => {
        input.addEventListener('input', () => {
          if (input.value.length === 1 && i < inputs.length - 1) {
            inputs[i + 1].focus();
          }
        });
        input.addEventListener('keydown', (e) => {
          if (e.key === 'Backspace' && input.value === '' && i > 0) {
            inputs[i - 1].focus();
          }
        });
      });
    });
  </script>
</head>
<body>
  <div class="container">
    <div class="header">
      <div class="logo">ðŸ“’</div>
      <div class="title">OTP Verification</div>
    </div>

    <% if (typeof error !== 'undefined' && error) { %>
      <div class="alert-danger" role="alert"><%= error %></div>
    <% } %>
    <% if (typeof success !== 'undefined' && success === 'otp-resent') { %>
      <div class="alert-success" role="alert">OTP resent successfully. Please check your email.</div>
    <% } %>

    <div class="otp-desc">Enter the 6-digit verification code<br>sent to your email.</div>

    <form action="/verify-otp" method="POST" autocomplete="off">
      <input type="hidden" name="email" value="<%= email %>" />
      <input type="hidden" name="mode" value="<%= mode %>" />

      <div class="otp-boxes">
        <% for(let i = 0; i < 6; i++) { %>
          <input type="text" name="otp[]" maxlength="1" class="otp-input" required pattern="[0-9]*" inputmode="numeric" />
        <% } %>
      </div>
      <button type="submit" class="verify-btn">Verify</button>
    </form>

    <!-- Resend Code Form -->
    <div class="resend-text">
      Resend code in: <span id="timer">01:00</span>
    </div>

    <form id="resendForm" action="/resend-otp" method="POST" style="text-align:center; margin-top: 10px;">
      <input type="hidden" name="email" value="<%= email %>" />
      <input type="hidden" name="mode" value="<%= mode %>" />
      <button
        id="resendBtn"
        type="submit"
        class="resend-link"
        disabled
        style="background:none; border:none; padding:0; font-size:0.98rem;"
      >
        Resend Code
      </button>
    </form>
  </div>

  <script>
    (function() {
      const TIMER_KEY = 'otpResendExpire';
      const DURATION = 60; // seconds you want the resend cooldown to last
      const timerEl = document.getElementById('timer');
      const resendBtn = document.getElementById('resendBtn');

      // format seconds as mm:ss
      function formatTime(seconds) {
        const m = String(Math.floor(seconds / 60)).padStart(2, '0');
        const s = String(seconds % 60).padStart(2, '0');
        return `${m}:${s}`;
      }

      // enable resend button and reset styling
      function enableResend() {
        resendBtn.disabled = false;
        resendBtn.style.color = '#1E379B';
        resendBtn.style.cursor = 'pointer';
        resendBtn.style.textDecoration = 'underline';
        timerEl.textContent = '00:00';
        localStorage.removeItem(TIMER_KEY);
      }

      // get expiration timestamp from localStorage or create a new one
      function getExpireTime() {
        const expire = localStorage.getItem(TIMER_KEY);
        if (expire) return parseInt(expire, 10);
        const newExpire = Date.now() + DURATION * 1000;
        localStorage.setItem(TIMER_KEY, newExpire);
        return newExpire;
      }

      let expireTime = getExpireTime();
      let now = Date.now();
      let timer = Math.floor((expireTime - now) / 1000);

      if(timer <= 0) {
        // timer expired, enable resend immediately
        enableResend();
      } else {
        // timer running: disable resend and show countdown
        resendBtn.disabled = true;
        resendBtn.style.color = 'gray';
        resendBtn.style.cursor = 'not-allowed';
        resendBtn.style.textDecoration = 'none';

        timerEl.textContent = formatTime(timer);

        const intervalId = setInterval(() => {
          timer--;
          if (timer <= 0) {
            clearInterval(intervalId);
            enableResend();
          } else {
            timerEl.textContent = formatTime(timer);
          }
        }, 1000);
      }
    })();
  </script>
</body>
</html>
